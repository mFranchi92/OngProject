// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OngProject.Infrastructure.Data;

namespace OngProject.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210713035730_User-Role-Seed")]
    partial class UserRoleSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484310",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484311",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484312",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484313",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484314",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484315",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484316",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484317",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484318",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484319",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7330"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484330",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484331",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484332",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484333",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484334",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484335",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484336",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484337",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484338",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        },
                        new
                        {
                            UserId = "b74ddd14-6340-4840-95c2-db1255484339",
                            RoleId = "c7b013f0-5201-4317-abd8-c211f91b7033"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(65535)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasMaxLength(65535)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedinUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("OngProject.Core.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AboutUsText")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedInUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WelcomeText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Rol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "3",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7033",
                            ConcurrencyStamp = "4",
                            Name = "Common",
                            NormalizedName = "Common"
                        });
                });

            modelBuilder.Entity("OngProject.Core.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Slides");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("OngProject.Core.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484310",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "780308a0-808d-4707-9314-329138961afe",
                            Email = "mail10@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 10",
                            IsDeleted = false,
                            LastName = "LastName 10",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail10@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEFVxwPtFa8Nklo8puS7IfV8fSstBuZ4wr1kBrObxXzFTisdKmSleB34vU3ju7vySg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b83bf0d5-126e-4182-8d11-03d5f6283f26",
                            TwoFactorEnabled = false,
                            UserName = "User 10"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484311",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb903d69-7949-49c1-b1e3-fccbe1f32bb4",
                            Email = "mail11@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 11",
                            IsDeleted = false,
                            LastName = "LastName 11",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail11@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEAs2KH6ISy4dq9N39yEaYj8oYXW92wurOOKXcFS3FBQgR7XE3IHYs8zgD2P+4SApwg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1aaecce6-bad8-4fbb-bf7d-7eabbdf609d4",
                            TwoFactorEnabled = false,
                            UserName = "User 11"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484312",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dea823d7-6103-474e-b1d0-77fa5860a9a8",
                            Email = "mail12@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 12",
                            IsDeleted = false,
                            LastName = "LastName 12",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail12@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEE6KShzOeSAhYdPlgtciteZS8MTcdKi3CQNjztNsboluNBHuFpDRjijp9ruoiGntZw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff383dba-819f-4863-887e-b6197a467c01",
                            TwoFactorEnabled = false,
                            UserName = "User 12"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484313",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cd1ed71-4a9d-462a-b764-e6ff93709838",
                            Email = "mail13@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 13",
                            IsDeleted = false,
                            LastName = "LastName 13",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail13@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEEYHvp1UQQiwQLQ6DR+aaBOTIwB+PmGmWmMxZTrR57D8ltea5RQ62ahL+TOYrMtVZg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51bd39e9-2d21-4ad7-b763-050e3336b944",
                            TwoFactorEnabled = false,
                            UserName = "User 13"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484314",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "068f82c3-8e43-481f-b88d-08784da0ae04",
                            Email = "mail14@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 14",
                            IsDeleted = false,
                            LastName = "LastName 14",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail14@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFE7SyL75rLEpBrXzeJo0zl6QzDntsZo20vE34aMjTBwYQXcr3Iz7cvId/TDAqj8Og==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a0748b59-7a2a-4283-953f-74bd4f259afb",
                            TwoFactorEnabled = false,
                            UserName = "User 14"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484315",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8c344daa-d51c-4845-9ec6-fcc7500ea6e0",
                            Email = "mail15@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 15",
                            IsDeleted = false,
                            LastName = "LastName 15",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail15@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJ3G5EMhd6/X5t9DrZqDZZun1fjYKPVe5rrMbgmfBdORgUfNuIGawR/mKHwf9CX0w==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77c2be2c-fd1f-4519-8170-daa7f7a2460e",
                            TwoFactorEnabled = false,
                            UserName = "User 15"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484316",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53f809a5-8f82-4d5b-8aa5-6306ff827756",
                            Email = "mail16@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 16",
                            IsDeleted = false,
                            LastName = "LastName 16",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail16@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBV4FtKAhxyQveaH6EJhpUXSgeGfnR6owNr9d9wc0Vbdq2ucfdRMQ78F35fx4bgadQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "867fed5b-c578-4fe3-9848-5ad8b06ee58b",
                            TwoFactorEnabled = false,
                            UserName = "User 16"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484317",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ad0b51d-d55e-4206-b3c1-380ecce99e17",
                            Email = "mail17@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 17",
                            IsDeleted = false,
                            LastName = "LastName 17",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail17@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELLn4tMuN30emgqLqO/y3ZAufCaWm+V118VeU4aKlsgWl1CGnYu7ry/xUWprDhK2OA==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82d4610f-9d75-44cf-a4de-f52527c47728",
                            TwoFactorEnabled = false,
                            UserName = "User 17"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484318",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2ed58c08-1bf2-47dd-885c-d477cde83113",
                            Email = "mail18@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 18",
                            IsDeleted = false,
                            LastName = "LastName 18",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail18@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEKxLsJE9SoOHHIWCks9YsN/+m2avQPJ6eUgE0UQO09lpy/FG4T3dr61GHZdxb6DdvA==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e14e9f2-2beb-425a-bde5-7e3da382497d",
                            TwoFactorEnabled = false,
                            UserName = "User 18"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484319",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9704707-caca-4688-aad2-e67937298589",
                            Email = "mail19@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 19",
                            IsDeleted = false,
                            LastName = "LastName 19",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail19@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAELkEiChvvwRniEDyNuKF3ELlcNVyXDqwl7Wqr4d5jQabbsz0/GKj7O8dF6yyc0kltQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7a0d4fc8-d861-447e-b8b0-5d424ce8a265",
                            TwoFactorEnabled = false,
                            UserName = "User 19"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484330",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "399e5ae5-262e-407f-9e16-6d79f7d1e977",
                            Email = "mail30@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 30",
                            IsDeleted = false,
                            LastName = "LastName 30",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail30@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3HMA1wexXvQ+FMCXdb2gwiirpLsdu3zah83AUOM/l2tR7r+Vys3FTS+v/kxfM06g==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d850fa49-f0fb-4f07-ad11-dabeac389474",
                            TwoFactorEnabled = false,
                            UserName = "User 30"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484331",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dd71c028-4c43-4453-9cac-23851835542f",
                            Email = "mail31@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 31",
                            IsDeleted = false,
                            LastName = "LastName 31",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail31@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEMA9G4c+ttqRhuItGFgbXbwurKy4dxGf/8NDAldQpNxop8QMwp2z6zMT1nWnjjhrYg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f26d849d-ac95-4589-adba-e3f978fd4a9a",
                            TwoFactorEnabled = false,
                            UserName = "User 31"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484332",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3aef7b02-fd73-42ae-ab63-0af1f64fd9a4",
                            Email = "mail32@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 32",
                            IsDeleted = false,
                            LastName = "LastName 32",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail32@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEL8HuB1ORnrHOmmn5AHGus5OYORzG/6ibpZF/KU3bhgBlve0rq+6yH0rJSkHnOD6Ww==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4e2f357e-e40f-49a8-be0e-de2948f79336",
                            TwoFactorEnabled = false,
                            UserName = "User 32"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c59b6729-d14c-4612-b604-aaa8caffaad9",
                            Email = "mail33@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 33",
                            IsDeleted = false,
                            LastName = "LastName 33",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail33@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEP78cb5OIvPYb+tnuDl3+8FBPGdJKyoA2eJlH4pQTTBbSPTjrDCmR3GGvsXvzX63rw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6e0dd3eb-9ba5-46f1-9d4d-fe176c0308a1",
                            TwoFactorEnabled = false,
                            UserName = "User 33"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484334",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d2f520b3-40c1-4769-99cc-75fe9bb04e96",
                            Email = "mail34@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 34",
                            IsDeleted = false,
                            LastName = "LastName 34",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail34@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEBu47XmDr8MelfLnPqlw2uklvPYLgHj5frKOhRwnWWXWiLoGOVakEpkm1d98G/8Vmw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9689bab-bcd5-4075-82e6-3a4ac0762572",
                            TwoFactorEnabled = false,
                            UserName = "User 34"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484335",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a787ac9-d836-4b9b-86df-ec0a0fb03e94",
                            Email = "mail35@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 35",
                            IsDeleted = false,
                            LastName = "LastName 35",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail35@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEFUS3L10tMyTuiJsBlD0VarOTM1P/yTt5HxJMsjhKi6VipYWKRvIR0PRuYQ7YEP2eg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bfa64e3-2472-47a7-b296-0ed9a37053c0",
                            TwoFactorEnabled = false,
                            UserName = "User 35"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484336",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dfa1100b-69fe-4813-895b-42b1ba2a6227",
                            Email = "mail36@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 36",
                            IsDeleted = false,
                            LastName = "LastName 36",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail36@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEL/526DUVkwPd1AKlvDF/OB3EFHtFdXsq1Z3d2hBHgQbPy34SFvioYdEBXsaA44NNg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94741c65-5580-454a-a27b-a1bfc782e519",
                            TwoFactorEnabled = false,
                            UserName = "User 36"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484337",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1188e1d3-cc82-48d4-bfef-9f2969ea8a22",
                            Email = "mail37@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 37",
                            IsDeleted = false,
                            LastName = "LastName 37",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail37@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEGj/FgoDzxxZfZUxYm8it7dcBcDlZ5hw+L7P1tvnE+k5FbMVG+H9MaeBk5PQpjfNvw==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "44c2a0fb-b4ad-4920-8d45-e6e62c290b1f",
                            TwoFactorEnabled = false,
                            UserName = "User 37"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484338",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d094b1c-01f9-4daf-baf2-181c2b4762bd",
                            Email = "mail38@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 38",
                            IsDeleted = false,
                            LastName = "LastName 38",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail38@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEDnp2xc9JlciwJD8tjme3Q/Ebt5o/se+iWjqTwM7JvRm4qanA7P31dqXflDFnau8xg==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "54fef47d-c807-4a9e-a3df-9613dac409d0",
                            TwoFactorEnabled = false,
                            UserName = "User 38"
                        },
                        new
                        {
                            Id = "b74ddd14-6340-4840-95c2-db1255484339",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0037b09-3ed6-43a6-b2c0-18a94de86a54",
                            Email = "mail39@mail.com",
                            EmailConfirmed = false,
                            FirstName = "User 39",
                            IsDeleted = false,
                            LastName = "LastName 39",
                            LockoutEnabled = false,
                            NormalizedEmail = "mail39@mail.com",
                            PasswordHash = "AQAAAAEAACcQAAAAEL8+6wZqvYsrAf5RTM8mRSdyrZCVk/LNqGtQ/gUfzuUthtL+mMS8ZlW2IqXylVa8tQ==",
                            PhoneNumber = "No Available",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04360e04-d150-41b8-af26-9d34e94f785a",
                            TwoFactorEnabled = false,
                            UserName = "User 39"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Rol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OngProject.Core.Entities.Comment", b =>
                {
                    b.HasOne("OngProject.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OngProject.Core.Entities.News", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OngProject.Core.Entities.Slide", b =>
                {
                    b.HasOne("OngProject.Core.Entities.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });
#pragma warning restore 612, 618
        }
    }
}
